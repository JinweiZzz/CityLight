// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wolong/geo/v2/geo.proto

#include "wolong/geo/v2/geo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wolong {
namespace geo {
namespace v2 {
PROTOBUF_CONSTEXPR LongLatPosition::LongLatPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongLatPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongLatPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongLatPositionDefaultTypeInternal() {}
  union {
    LongLatPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongLatPositionDefaultTypeInternal _LongLatPosition_default_instance_;
PROTOBUF_CONSTEXPR XYPosition::XYPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XYPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XYPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XYPositionDefaultTypeInternal() {}
  union {
    XYPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XYPositionDefaultTypeInternal _XYPosition_default_instance_;
PROTOBUF_CONSTEXPR LanePosition::LanePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.lane_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LanePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanePositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanePositionDefaultTypeInternal() {}
  union {
    LanePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanePositionDefaultTypeInternal _LanePosition_default_instance_;
PROTOBUF_CONSTEXPR AoiPosition::AoiPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aoi_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AoiPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AoiPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AoiPositionDefaultTypeInternal() {}
  union {
    AoiPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AoiPositionDefaultTypeInternal _AoiPosition_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_position_)*/nullptr
  , /*decltype(_impl_.aoi_position_)*/nullptr
  , /*decltype(_impl_.longlat_position_)*/nullptr
  , /*decltype(_impl_.xy_position_)*/nullptr} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR LongLatRectArea::LongLatRectArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ne_)*/nullptr
  , /*decltype(_impl_.sw_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongLatRectAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongLatRectAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongLatRectAreaDefaultTypeInternal() {}
  union {
    LongLatRectArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongLatRectAreaDefaultTypeInternal _LongLatRectArea_default_instance_;
}  // namespace v2
}  // namespace geo
}  // namespace wolong
static ::_pb::Metadata file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_wolong_2fgeo_2fv2_2fgeo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_wolong_2fgeo_2fv2_2fgeo_2eproto = nullptr;

const uint32_t TableStruct_wolong_2fgeo_2fv2_2fgeo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LongLatPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LongLatPosition, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LongLatPosition, _impl_.latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::XYPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::XYPosition, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::XYPosition, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LanePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LanePosition, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LanePosition, _impl_.s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::AoiPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::AoiPosition, _impl_.aoi_id_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::Position, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::Position, _impl_.lane_position_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::Position, _impl_.aoi_position_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::Position, _impl_.longlat_position_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::Position, _impl_.xy_position_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LongLatRectArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LongLatRectArea, _impl_.ne_),
  PROTOBUF_FIELD_OFFSET(::wolong::geo::v2::LongLatRectArea, _impl_.sw_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wolong::geo::v2::LongLatPosition)},
  { 8, -1, -1, sizeof(::wolong::geo::v2::XYPosition)},
  { 16, -1, -1, sizeof(::wolong::geo::v2::LanePosition)},
  { 24, -1, -1, sizeof(::wolong::geo::v2::AoiPosition)},
  { 31, 41, -1, sizeof(::wolong::geo::v2::Position)},
  { 45, -1, -1, sizeof(::wolong::geo::v2::LongLatRectArea)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wolong::geo::v2::_LongLatPosition_default_instance_._instance,
  &::wolong::geo::v2::_XYPosition_default_instance_._instance,
  &::wolong::geo::v2::_LanePosition_default_instance_._instance,
  &::wolong::geo::v2::_AoiPosition_default_instance_._instance,
  &::wolong::geo::v2::_Position_default_instance_._instance,
  &::wolong::geo::v2::_LongLatRectArea_default_instance_._instance,
};

const char descriptor_table_protodef_wolong_2fgeo_2fv2_2fgeo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027wolong/geo/v2/geo.proto\022\rwolong.geo.v2"
  "\"6\n\017LongLatPosition\022\021\n\tlongitude\030\001 \001(\001\022\020"
  "\n\010latitude\030\002 \001(\001\"\"\n\nXYPosition\022\t\n\001x\030\001 \001("
  "\001\022\t\n\001y\030\002 \001(\001\"*\n\014LanePosition\022\017\n\007lane_id\030"
  "\001 \001(\005\022\t\n\001s\030\002 \001(\001\"\035\n\013AoiPosition\022\016\n\006aoi_i"
  "d\030\001 \001(\005\"\266\002\n\010Position\0227\n\rlane_position\030\001 "
  "\001(\0132\033.wolong.geo.v2.LanePositionH\000\210\001\001\0225\n"
  "\014aoi_position\030\002 \001(\0132\032.wolong.geo.v2.AoiP"
  "ositionH\001\210\001\001\022=\n\020longlat_position\030\003 \001(\0132\036"
  ".wolong.geo.v2.LongLatPositionH\002\210\001\001\0223\n\013x"
  "y_position\030\004 \001(\0132\031.wolong.geo.v2.XYPosit"
  "ionH\003\210\001\001B\020\n\016_lane_positionB\017\n\r_aoi_posit"
  "ionB\023\n\021_longlat_positionB\016\n\014_xy_position"
  "\"i\n\017LongLatRectArea\022*\n\002ne\030\001 \001(\0132\036.wolong"
  ".geo.v2.LongLatPosition\022*\n\002sw\030\002 \001(\0132\036.wo"
  "long.geo.v2.LongLatPositionb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto = {
    false, false, 635, descriptor_table_protodef_wolong_2fgeo_2fv2_2fgeo_2eproto,
    "wolong/geo/v2/geo.proto",
    &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_wolong_2fgeo_2fv2_2fgeo_2eproto::offsets,
    file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto, file_level_enum_descriptors_wolong_2fgeo_2fv2_2fgeo_2eproto,
    file_level_service_descriptors_wolong_2fgeo_2fv2_2fgeo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter() {
  return &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wolong_2fgeo_2fv2_2fgeo_2eproto(&descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto);
namespace wolong {
namespace geo {
namespace v2 {

// ===================================================================

class LongLatPosition::_Internal {
 public:
};

LongLatPosition::LongLatPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wolong.geo.v2.LongLatPosition)
}
LongLatPosition::LongLatPosition(const LongLatPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongLatPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){}
    , decltype(_impl_.latitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latitude_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  // @@protoc_insertion_point(copy_constructor:wolong.geo.v2.LongLatPosition)
}

inline void LongLatPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){0}
    , decltype(_impl_.latitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongLatPosition::~LongLatPosition() {
  // @@protoc_insertion_point(destructor:wolong.geo.v2.LongLatPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongLatPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LongLatPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongLatPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:wolong.geo.v2.LongLatPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.latitude_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongLatPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongLatPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wolong.geo.v2.LongLatPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wolong.geo.v2.LongLatPosition)
  return target;
}

size_t LongLatPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wolong.geo.v2.LongLatPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongLatPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongLatPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongLatPosition::GetClassData() const { return &_class_data_; }


void LongLatPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongLatPosition*>(&to_msg);
  auto& from = static_cast<const LongLatPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wolong.geo.v2.LongLatPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongLatPosition::CopyFrom(const LongLatPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wolong.geo.v2.LongLatPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLatPosition::IsInitialized() const {
  return true;
}

void LongLatPosition::InternalSwap(LongLatPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongLatPosition, _impl_.latitude_)
      + sizeof(LongLatPosition::_impl_.latitude_)
      - PROTOBUF_FIELD_OFFSET(LongLatPosition, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLatPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter, &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once,
      file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[0]);
}

// ===================================================================

class XYPosition::_Internal {
 public:
};

XYPosition::XYPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wolong.geo.v2.XYPosition)
}
XYPosition::XYPosition(const XYPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XYPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:wolong.geo.v2.XYPosition)
}

inline void XYPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

XYPosition::~XYPosition() {
  // @@protoc_insertion_point(destructor:wolong.geo.v2.XYPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XYPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XYPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XYPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:wolong.geo.v2.XYPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XYPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wolong.geo.v2.XYPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wolong.geo.v2.XYPosition)
  return target;
}

size_t XYPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wolong.geo.v2.XYPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XYPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XYPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XYPosition::GetClassData() const { return &_class_data_; }


void XYPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XYPosition*>(&to_msg);
  auto& from = static_cast<const XYPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wolong.geo.v2.XYPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XYPosition::CopyFrom(const XYPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wolong.geo.v2.XYPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYPosition::IsInitialized() const {
  return true;
}

void XYPosition::InternalSwap(XYPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYPosition, _impl_.y_)
      + sizeof(XYPosition::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(XYPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter, &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once,
      file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[1]);
}

// ===================================================================

class LanePosition::_Internal {
 public:
};

LanePosition::LanePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wolong.geo.v2.LanePosition)
}
LanePosition::LanePosition(const LanePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LanePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_){}
    , decltype(_impl_.lane_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_id_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.lane_id_));
  // @@protoc_insertion_point(copy_constructor:wolong.geo.v2.LanePosition)
}

inline void LanePosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_){0}
    , decltype(_impl_.lane_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LanePosition::~LanePosition() {
  // @@protoc_insertion_point(destructor:wolong.geo.v2.LanePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LanePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LanePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LanePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:wolong.geo.v2.LanePosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lane_id_) -
      reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.lane_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanePosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wolong.geo.v2.LanePosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1;
  if (this->_internal_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // double s = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s = this->_internal_s();
  uint64_t raw_s;
  memcpy(&raw_s, &tmp_s, sizeof(tmp_s));
  if (raw_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wolong.geo.v2.LanePosition)
  return target;
}

size_t LanePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wolong.geo.v2.LanePosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s = this->_internal_s();
  uint64_t raw_s;
  memcpy(&raw_s, &tmp_s, sizeof(tmp_s));
  if (raw_s != 0) {
    total_size += 1 + 8;
  }

  // int32 lane_id = 1;
  if (this->_internal_lane_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LanePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanePosition::GetClassData() const { return &_class_data_; }


void LanePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LanePosition*>(&to_msg);
  auto& from = static_cast<const LanePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wolong.geo.v2.LanePosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s = from._internal_s();
  uint64_t raw_s;
  memcpy(&raw_s, &tmp_s, sizeof(tmp_s));
  if (raw_s != 0) {
    _this->_internal_set_s(from._internal_s());
  }
  if (from._internal_lane_id() != 0) {
    _this->_internal_set_lane_id(from._internal_lane_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanePosition::CopyFrom(const LanePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wolong.geo.v2.LanePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePosition::IsInitialized() const {
  return true;
}

void LanePosition::InternalSwap(LanePosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LanePosition, _impl_.lane_id_)
      + sizeof(LanePosition::_impl_.lane_id_)
      - PROTOBUF_FIELD_OFFSET(LanePosition, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LanePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter, &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once,
      file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[2]);
}

// ===================================================================

class AoiPosition::_Internal {
 public:
};

AoiPosition::AoiPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wolong.geo.v2.AoiPosition)
}
AoiPosition::AoiPosition(const AoiPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AoiPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aoi_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.aoi_id_ = from._impl_.aoi_id_;
  // @@protoc_insertion_point(copy_constructor:wolong.geo.v2.AoiPosition)
}

inline void AoiPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aoi_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AoiPosition::~AoiPosition() {
  // @@protoc_insertion_point(destructor:wolong.geo.v2.AoiPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AoiPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AoiPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AoiPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:wolong.geo.v2.AoiPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aoi_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AoiPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 aoi_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aoi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AoiPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wolong.geo.v2.AoiPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aoi_id = 1;
  if (this->_internal_aoi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_aoi_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wolong.geo.v2.AoiPosition)
  return target;
}

size_t AoiPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wolong.geo.v2.AoiPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 aoi_id = 1;
  if (this->_internal_aoi_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aoi_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AoiPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AoiPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AoiPosition::GetClassData() const { return &_class_data_; }


void AoiPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AoiPosition*>(&to_msg);
  auto& from = static_cast<const AoiPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wolong.geo.v2.AoiPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aoi_id() != 0) {
    _this->_internal_set_aoi_id(from._internal_aoi_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AoiPosition::CopyFrom(const AoiPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wolong.geo.v2.AoiPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AoiPosition::IsInitialized() const {
  return true;
}

void AoiPosition::InternalSwap(AoiPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.aoi_id_, other->_impl_.aoi_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AoiPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter, &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once,
      file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[3]);
}

// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._impl_._has_bits_);
  static const ::wolong::geo::v2::LanePosition& lane_position(const Position* msg);
  static void set_has_lane_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wolong::geo::v2::AoiPosition& aoi_position(const Position* msg);
  static void set_has_aoi_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wolong::geo::v2::LongLatPosition& longlat_position(const Position* msg);
  static void set_has_longlat_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::wolong::geo::v2::XYPosition& xy_position(const Position* msg);
  static void set_has_xy_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::wolong::geo::v2::LanePosition&
Position::_Internal::lane_position(const Position* msg) {
  return *msg->_impl_.lane_position_;
}
const ::wolong::geo::v2::AoiPosition&
Position::_Internal::aoi_position(const Position* msg) {
  return *msg->_impl_.aoi_position_;
}
const ::wolong::geo::v2::LongLatPosition&
Position::_Internal::longlat_position(const Position* msg) {
  return *msg->_impl_.longlat_position_;
}
const ::wolong::geo::v2::XYPosition&
Position::_Internal::xy_position(const Position* msg) {
  return *msg->_impl_.xy_position_;
}
Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wolong.geo.v2.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_position_){nullptr}
    , decltype(_impl_.aoi_position_){nullptr}
    , decltype(_impl_.longlat_position_){nullptr}
    , decltype(_impl_.xy_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_position()) {
    _this->_impl_.lane_position_ = new ::wolong::geo::v2::LanePosition(*from._impl_.lane_position_);
  }
  if (from._internal_has_aoi_position()) {
    _this->_impl_.aoi_position_ = new ::wolong::geo::v2::AoiPosition(*from._impl_.aoi_position_);
  }
  if (from._internal_has_longlat_position()) {
    _this->_impl_.longlat_position_ = new ::wolong::geo::v2::LongLatPosition(*from._impl_.longlat_position_);
  }
  if (from._internal_has_xy_position()) {
    _this->_impl_.xy_position_ = new ::wolong::geo::v2::XYPosition(*from._impl_.xy_position_);
  }
  // @@protoc_insertion_point(copy_constructor:wolong.geo.v2.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_position_){nullptr}
    , decltype(_impl_.aoi_position_){nullptr}
    , decltype(_impl_.longlat_position_){nullptr}
    , decltype(_impl_.xy_position_){nullptr}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:wolong.geo.v2.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lane_position_;
  if (this != internal_default_instance()) delete _impl_.aoi_position_;
  if (this != internal_default_instance()) delete _impl_.longlat_position_;
  if (this != internal_default_instance()) delete _impl_.xy_position_;
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:wolong.geo.v2.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lane_position_ != nullptr);
      _impl_.lane_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.aoi_position_ != nullptr);
      _impl_.aoi_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.longlat_position_ != nullptr);
      _impl_.longlat_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.xy_position_ != nullptr);
      _impl_.xy_position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .wolong.geo.v2.LanePosition lane_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wolong.geo.v2.AoiPosition aoi_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aoi_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wolong.geo.v2.LongLatPosition longlat_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_longlat_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wolong.geo.v2.XYPosition xy_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_xy_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wolong.geo.v2.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .wolong.geo.v2.LanePosition lane_position = 1;
  if (_internal_has_lane_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lane_position(this),
        _Internal::lane_position(this).GetCachedSize(), target, stream);
  }

  // optional .wolong.geo.v2.AoiPosition aoi_position = 2;
  if (_internal_has_aoi_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::aoi_position(this),
        _Internal::aoi_position(this).GetCachedSize(), target, stream);
  }

  // optional .wolong.geo.v2.LongLatPosition longlat_position = 3;
  if (_internal_has_longlat_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::longlat_position(this),
        _Internal::longlat_position(this).GetCachedSize(), target, stream);
  }

  // optional .wolong.geo.v2.XYPosition xy_position = 4;
  if (_internal_has_xy_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::xy_position(this),
        _Internal::xy_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wolong.geo.v2.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wolong.geo.v2.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .wolong.geo.v2.LanePosition lane_position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_position_);
    }

    // optional .wolong.geo.v2.AoiPosition aoi_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aoi_position_);
    }

    // optional .wolong.geo.v2.LongLatPosition longlat_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.longlat_position_);
    }

    // optional .wolong.geo.v2.XYPosition xy_position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.xy_position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wolong.geo.v2.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lane_position()->::wolong::geo::v2::LanePosition::MergeFrom(
          from._internal_lane_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_aoi_position()->::wolong::geo::v2::AoiPosition::MergeFrom(
          from._internal_aoi_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_longlat_position()->::wolong::geo::v2::LongLatPosition::MergeFrom(
          from._internal_longlat_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_xy_position()->::wolong::geo::v2::XYPosition::MergeFrom(
          from._internal_xy_position());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wolong.geo.v2.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.xy_position_)
      + sizeof(Position::_impl_.xy_position_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.lane_position_)>(
          reinterpret_cast<char*>(&_impl_.lane_position_),
          reinterpret_cast<char*>(&other->_impl_.lane_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter, &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once,
      file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[4]);
}

// ===================================================================

class LongLatRectArea::_Internal {
 public:
  static const ::wolong::geo::v2::LongLatPosition& ne(const LongLatRectArea* msg);
  static const ::wolong::geo::v2::LongLatPosition& sw(const LongLatRectArea* msg);
};

const ::wolong::geo::v2::LongLatPosition&
LongLatRectArea::_Internal::ne(const LongLatRectArea* msg) {
  return *msg->_impl_.ne_;
}
const ::wolong::geo::v2::LongLatPosition&
LongLatRectArea::_Internal::sw(const LongLatRectArea* msg) {
  return *msg->_impl_.sw_;
}
LongLatRectArea::LongLatRectArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wolong.geo.v2.LongLatRectArea)
}
LongLatRectArea::LongLatRectArea(const LongLatRectArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongLatRectArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ne_){nullptr}
    , decltype(_impl_.sw_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ne()) {
    _this->_impl_.ne_ = new ::wolong::geo::v2::LongLatPosition(*from._impl_.ne_);
  }
  if (from._internal_has_sw()) {
    _this->_impl_.sw_ = new ::wolong::geo::v2::LongLatPosition(*from._impl_.sw_);
  }
  // @@protoc_insertion_point(copy_constructor:wolong.geo.v2.LongLatRectArea)
}

inline void LongLatRectArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ne_){nullptr}
    , decltype(_impl_.sw_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongLatRectArea::~LongLatRectArea() {
  // @@protoc_insertion_point(destructor:wolong.geo.v2.LongLatRectArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongLatRectArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ne_;
  if (this != internal_default_instance()) delete _impl_.sw_;
}

void LongLatRectArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongLatRectArea::Clear() {
// @@protoc_insertion_point(message_clear_start:wolong.geo.v2.LongLatRectArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ne_ != nullptr) {
    delete _impl_.ne_;
  }
  _impl_.ne_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sw_ != nullptr) {
    delete _impl_.sw_;
  }
  _impl_.sw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongLatRectArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wolong.geo.v2.LongLatPosition ne = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ne(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wolong.geo.v2.LongLatPosition sw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongLatRectArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wolong.geo.v2.LongLatRectArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wolong.geo.v2.LongLatPosition ne = 1;
  if (this->_internal_has_ne()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ne(this),
        _Internal::ne(this).GetCachedSize(), target, stream);
  }

  // .wolong.geo.v2.LongLatPosition sw = 2;
  if (this->_internal_has_sw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sw(this),
        _Internal::sw(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wolong.geo.v2.LongLatRectArea)
  return target;
}

size_t LongLatRectArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wolong.geo.v2.LongLatRectArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wolong.geo.v2.LongLatPosition ne = 1;
  if (this->_internal_has_ne()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ne_);
  }

  // .wolong.geo.v2.LongLatPosition sw = 2;
  if (this->_internal_has_sw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sw_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongLatRectArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongLatRectArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongLatRectArea::GetClassData() const { return &_class_data_; }


void LongLatRectArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongLatRectArea*>(&to_msg);
  auto& from = static_cast<const LongLatRectArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wolong.geo.v2.LongLatRectArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ne()) {
    _this->_internal_mutable_ne()->::wolong::geo::v2::LongLatPosition::MergeFrom(
        from._internal_ne());
  }
  if (from._internal_has_sw()) {
    _this->_internal_mutable_sw()->::wolong::geo::v2::LongLatPosition::MergeFrom(
        from._internal_sw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongLatRectArea::CopyFrom(const LongLatRectArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wolong.geo.v2.LongLatRectArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLatRectArea::IsInitialized() const {
  return true;
}

void LongLatRectArea::InternalSwap(LongLatRectArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongLatRectArea, _impl_.sw_)
      + sizeof(LongLatRectArea::_impl_.sw_)
      - PROTOBUF_FIELD_OFFSET(LongLatRectArea, _impl_.ne_)>(
          reinterpret_cast<char*>(&_impl_.ne_),
          reinterpret_cast<char*>(&other->_impl_.ne_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLatRectArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_getter, &descriptor_table_wolong_2fgeo_2fv2_2fgeo_2eproto_once,
      file_level_metadata_wolong_2fgeo_2fv2_2fgeo_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace geo
}  // namespace wolong
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wolong::geo::v2::LongLatPosition*
Arena::CreateMaybeMessage< ::wolong::geo::v2::LongLatPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wolong::geo::v2::LongLatPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::wolong::geo::v2::XYPosition*
Arena::CreateMaybeMessage< ::wolong::geo::v2::XYPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wolong::geo::v2::XYPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::wolong::geo::v2::LanePosition*
Arena::CreateMaybeMessage< ::wolong::geo::v2::LanePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wolong::geo::v2::LanePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::wolong::geo::v2::AoiPosition*
Arena::CreateMaybeMessage< ::wolong::geo::v2::AoiPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wolong::geo::v2::AoiPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::wolong::geo::v2::Position*
Arena::CreateMaybeMessage< ::wolong::geo::v2::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wolong::geo::v2::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::wolong::geo::v2::LongLatRectArea*
Arena::CreateMaybeMessage< ::wolong::geo::v2::LongLatRectArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wolong::geo::v2::LongLatRectArea >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
