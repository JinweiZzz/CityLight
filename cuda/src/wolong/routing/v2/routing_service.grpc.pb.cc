// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wolong/routing/v2/routing_service.proto

#include "wolong/routing/v2/routing_service.pb.h"
#include "wolong/routing/v2/routing_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace wolong {
namespace routing {
namespace v2 {

static const char* RoutingService_method_names[] = {
  "/wolong.routing.v2.RoutingService/GetRoute",
  "/wolong.routing.v2.RoutingService/SetDrivingCosts",
  "/wolong.routing.v2.RoutingService/GetDrivingCosts",
};

std::unique_ptr< RoutingService::Stub> RoutingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoutingService::Stub> stub(new RoutingService::Stub(channel, options));
  return stub;
}

RoutingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetRoute_(RoutingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDrivingCosts_(RoutingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDrivingCosts_(RoutingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoutingService::Stub::GetRoute(::grpc::ClientContext* context, const ::wolong::routing::v2::GetRouteRequest& request, ::wolong::routing::v2::GetRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wolong::routing::v2::GetRouteRequest, ::wolong::routing::v2::GetRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoute_, context, request, response);
}

void RoutingService::Stub::async::GetRoute(::grpc::ClientContext* context, const ::wolong::routing::v2::GetRouteRequest* request, ::wolong::routing::v2::GetRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wolong::routing::v2::GetRouteRequest, ::wolong::routing::v2::GetRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, std::move(f));
}

void RoutingService::Stub::async::GetRoute(::grpc::ClientContext* context, const ::wolong::routing::v2::GetRouteRequest* request, ::wolong::routing::v2::GetRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wolong::routing::v2::GetRouteResponse>* RoutingService::Stub::PrepareAsyncGetRouteRaw(::grpc::ClientContext* context, const ::wolong::routing::v2::GetRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wolong::routing::v2::GetRouteResponse, ::wolong::routing::v2::GetRouteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wolong::routing::v2::GetRouteResponse>* RoutingService::Stub::AsyncGetRouteRaw(::grpc::ClientContext* context, const ::wolong::routing::v2::GetRouteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRouteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RoutingService::Stub::SetDrivingCosts(::grpc::ClientContext* context, const ::wolong::routing::v2::SetDrivingCostsRequest& request, ::wolong::routing::v2::SetDrivingCostsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wolong::routing::v2::SetDrivingCostsRequest, ::wolong::routing::v2::SetDrivingCostsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDrivingCosts_, context, request, response);
}

void RoutingService::Stub::async::SetDrivingCosts(::grpc::ClientContext* context, const ::wolong::routing::v2::SetDrivingCostsRequest* request, ::wolong::routing::v2::SetDrivingCostsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wolong::routing::v2::SetDrivingCostsRequest, ::wolong::routing::v2::SetDrivingCostsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDrivingCosts_, context, request, response, std::move(f));
}

void RoutingService::Stub::async::SetDrivingCosts(::grpc::ClientContext* context, const ::wolong::routing::v2::SetDrivingCostsRequest* request, ::wolong::routing::v2::SetDrivingCostsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDrivingCosts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wolong::routing::v2::SetDrivingCostsResponse>* RoutingService::Stub::PrepareAsyncSetDrivingCostsRaw(::grpc::ClientContext* context, const ::wolong::routing::v2::SetDrivingCostsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wolong::routing::v2::SetDrivingCostsResponse, ::wolong::routing::v2::SetDrivingCostsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDrivingCosts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wolong::routing::v2::SetDrivingCostsResponse>* RoutingService::Stub::AsyncSetDrivingCostsRaw(::grpc::ClientContext* context, const ::wolong::routing::v2::SetDrivingCostsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDrivingCostsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RoutingService::Stub::GetDrivingCosts(::grpc::ClientContext* context, const ::wolong::routing::v2::GetDrivingCostsRequest& request, ::wolong::routing::v2::GetDrivingCostsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wolong::routing::v2::GetDrivingCostsRequest, ::wolong::routing::v2::GetDrivingCostsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDrivingCosts_, context, request, response);
}

void RoutingService::Stub::async::GetDrivingCosts(::grpc::ClientContext* context, const ::wolong::routing::v2::GetDrivingCostsRequest* request, ::wolong::routing::v2::GetDrivingCostsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wolong::routing::v2::GetDrivingCostsRequest, ::wolong::routing::v2::GetDrivingCostsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDrivingCosts_, context, request, response, std::move(f));
}

void RoutingService::Stub::async::GetDrivingCosts(::grpc::ClientContext* context, const ::wolong::routing::v2::GetDrivingCostsRequest* request, ::wolong::routing::v2::GetDrivingCostsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDrivingCosts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wolong::routing::v2::GetDrivingCostsResponse>* RoutingService::Stub::PrepareAsyncGetDrivingCostsRaw(::grpc::ClientContext* context, const ::wolong::routing::v2::GetDrivingCostsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wolong::routing::v2::GetDrivingCostsResponse, ::wolong::routing::v2::GetDrivingCostsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDrivingCosts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wolong::routing::v2::GetDrivingCostsResponse>* RoutingService::Stub::AsyncGetDrivingCostsRaw(::grpc::ClientContext* context, const ::wolong::routing::v2::GetDrivingCostsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDrivingCostsRaw(context, request, cq);
  result->StartCall();
  return result;
}

RoutingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutingService::Service, ::wolong::routing::v2::GetRouteRequest, ::wolong::routing::v2::GetRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wolong::routing::v2::GetRouteRequest* req,
             ::wolong::routing::v2::GetRouteResponse* resp) {
               return service->GetRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutingService::Service, ::wolong::routing::v2::SetDrivingCostsRequest, ::wolong::routing::v2::SetDrivingCostsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wolong::routing::v2::SetDrivingCostsRequest* req,
             ::wolong::routing::v2::SetDrivingCostsResponse* resp) {
               return service->SetDrivingCosts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutingService::Service, ::wolong::routing::v2::GetDrivingCostsRequest, ::wolong::routing::v2::GetDrivingCostsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wolong::routing::v2::GetDrivingCostsRequest* req,
             ::wolong::routing::v2::GetDrivingCostsResponse* resp) {
               return service->GetDrivingCosts(ctx, req, resp);
             }, this)));
}

RoutingService::Service::~Service() {
}

::grpc::Status RoutingService::Service::GetRoute(::grpc::ServerContext* context, const ::wolong::routing::v2::GetRouteRequest* request, ::wolong::routing::v2::GetRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoutingService::Service::SetDrivingCosts(::grpc::ServerContext* context, const ::wolong::routing::v2::SetDrivingCostsRequest* request, ::wolong::routing::v2::SetDrivingCostsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoutingService::Service::GetDrivingCosts(::grpc::ServerContext* context, const ::wolong::routing::v2::GetDrivingCostsRequest* request, ::wolong::routing::v2::GetDrivingCostsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace wolong
}  // namespace routing
}  // namespace v2

